module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateCategoryParticipant {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupParticipant {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  name: String!
  categoryParticipants(where: CategoryParticipantWhereInput, orderBy: CategoryParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CategoryParticipant!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  categoryParticipants: CategoryParticipantCreateManyWithoutCategoryIdInput
}

input CategoryCreateOneWithoutCategoryParticipantsInput {
  create: CategoryCreateWithoutCategoryParticipantsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutCategoryParticipantsInput {
  id: ID
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CategoryParticipant {
  id: ID!
  categoryId: Category
  userId: User
  name: String!
}

type CategoryParticipantConnection {
  pageInfo: PageInfo!
  edges: [CategoryParticipantEdge]!
  aggregate: AggregateCategoryParticipant!
}

input CategoryParticipantCreateInput {
  id: ID
  categoryId: CategoryCreateOneWithoutCategoryParticipantsInput
  userId: UserCreateOneInput
  name: String!
}

input CategoryParticipantCreateManyWithoutCategoryIdInput {
  create: [CategoryParticipantCreateWithoutCategoryIdInput!]
  connect: [CategoryParticipantWhereUniqueInput!]
}

input CategoryParticipantCreateWithoutCategoryIdInput {
  id: ID
  userId: UserCreateOneInput
  name: String!
}

type CategoryParticipantEdge {
  node: CategoryParticipant!
  cursor: String!
}

enum CategoryParticipantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CategoryParticipantPreviousValues {
  id: ID!
  name: String!
}

input CategoryParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CategoryParticipantScalarWhereInput!]
  OR: [CategoryParticipantScalarWhereInput!]
  NOT: [CategoryParticipantScalarWhereInput!]
}

type CategoryParticipantSubscriptionPayload {
  mutation: MutationType!
  node: CategoryParticipant
  updatedFields: [String!]
  previousValues: CategoryParticipantPreviousValues
}

input CategoryParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryParticipantWhereInput
  AND: [CategoryParticipantSubscriptionWhereInput!]
  OR: [CategoryParticipantSubscriptionWhereInput!]
  NOT: [CategoryParticipantSubscriptionWhereInput!]
}

input CategoryParticipantUpdateInput {
  categoryId: CategoryUpdateOneWithoutCategoryParticipantsInput
  userId: UserUpdateOneInput
  name: String
}

input CategoryParticipantUpdateManyDataInput {
  name: String
}

input CategoryParticipantUpdateManyMutationInput {
  name: String
}

input CategoryParticipantUpdateManyWithoutCategoryIdInput {
  create: [CategoryParticipantCreateWithoutCategoryIdInput!]
  delete: [CategoryParticipantWhereUniqueInput!]
  connect: [CategoryParticipantWhereUniqueInput!]
  set: [CategoryParticipantWhereUniqueInput!]
  disconnect: [CategoryParticipantWhereUniqueInput!]
  update: [CategoryParticipantUpdateWithWhereUniqueWithoutCategoryIdInput!]
  upsert: [CategoryParticipantUpsertWithWhereUniqueWithoutCategoryIdInput!]
  deleteMany: [CategoryParticipantScalarWhereInput!]
  updateMany: [CategoryParticipantUpdateManyWithWhereNestedInput!]
}

input CategoryParticipantUpdateManyWithWhereNestedInput {
  where: CategoryParticipantScalarWhereInput!
  data: CategoryParticipantUpdateManyDataInput!
}

input CategoryParticipantUpdateWithoutCategoryIdDataInput {
  userId: UserUpdateOneInput
  name: String
}

input CategoryParticipantUpdateWithWhereUniqueWithoutCategoryIdInput {
  where: CategoryParticipantWhereUniqueInput!
  data: CategoryParticipantUpdateWithoutCategoryIdDataInput!
}

input CategoryParticipantUpsertWithWhereUniqueWithoutCategoryIdInput {
  where: CategoryParticipantWhereUniqueInput!
  update: CategoryParticipantUpdateWithoutCategoryIdDataInput!
  create: CategoryParticipantCreateWithoutCategoryIdInput!
}

input CategoryParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  categoryId: CategoryWhereInput
  userId: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CategoryParticipantWhereInput!]
  OR: [CategoryParticipantWhereInput!]
  NOT: [CategoryParticipantWhereInput!]
}

input CategoryParticipantWhereUniqueInput {
  id: ID
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  categoryParticipants: CategoryParticipantUpdateManyWithoutCategoryIdInput
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneWithoutCategoryParticipantsInput {
  create: CategoryCreateWithoutCategoryParticipantsInput
  update: CategoryUpdateWithoutCategoryParticipantsDataInput
  upsert: CategoryUpsertWithoutCategoryParticipantsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutCategoryParticipantsDataInput {
  name: String
}

input CategoryUpsertWithoutCategoryParticipantsInput {
  update: CategoryUpdateWithoutCategoryParticipantsDataInput!
  create: CategoryCreateWithoutCategoryParticipantsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  categoryParticipants_every: CategoryParticipantWhereInput
  categoryParticipants_some: CategoryParticipantWhereInput
  categoryParticipants_none: CategoryParticipantWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  name: String!
  groupParticipants(where: GroupParticipantWhereInput, orderBy: GroupParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupParticipant!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  groupParticipants: GroupParticipantCreateManyWithoutGroupIdInput
}

input GroupCreateOneWithoutGroupParticipantsInput {
  create: GroupCreateWithoutGroupParticipantsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutGroupParticipantsInput {
  id: ID
  name: String!
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type GroupParticipant {
  id: ID!
  groupId: Group
  userId: User
  name: String!
}

type GroupParticipantConnection {
  pageInfo: PageInfo!
  edges: [GroupParticipantEdge]!
  aggregate: AggregateGroupParticipant!
}

input GroupParticipantCreateInput {
  id: ID
  groupId: GroupCreateOneWithoutGroupParticipantsInput
  userId: UserCreateOneWithoutGroupsInput
  name: String!
}

input GroupParticipantCreateManyWithoutGroupIdInput {
  create: [GroupParticipantCreateWithoutGroupIdInput!]
  connect: [GroupParticipantWhereUniqueInput!]
}

input GroupParticipantCreateManyWithoutUserIdInput {
  create: [GroupParticipantCreateWithoutUserIdInput!]
  connect: [GroupParticipantWhereUniqueInput!]
}

input GroupParticipantCreateWithoutGroupIdInput {
  id: ID
  userId: UserCreateOneWithoutGroupsInput
  name: String!
}

input GroupParticipantCreateWithoutUserIdInput {
  id: ID
  groupId: GroupCreateOneWithoutGroupParticipantsInput
  name: String!
}

type GroupParticipantEdge {
  node: GroupParticipant!
  cursor: String!
}

enum GroupParticipantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type GroupParticipantPreviousValues {
  id: ID!
  name: String!
}

input GroupParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [GroupParticipantScalarWhereInput!]
  OR: [GroupParticipantScalarWhereInput!]
  NOT: [GroupParticipantScalarWhereInput!]
}

type GroupParticipantSubscriptionPayload {
  mutation: MutationType!
  node: GroupParticipant
  updatedFields: [String!]
  previousValues: GroupParticipantPreviousValues
}

input GroupParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupParticipantWhereInput
  AND: [GroupParticipantSubscriptionWhereInput!]
  OR: [GroupParticipantSubscriptionWhereInput!]
  NOT: [GroupParticipantSubscriptionWhereInput!]
}

input GroupParticipantUpdateInput {
  groupId: GroupUpdateOneWithoutGroupParticipantsInput
  userId: UserUpdateOneWithoutGroupsInput
  name: String
}

input GroupParticipantUpdateManyDataInput {
  name: String
}

input GroupParticipantUpdateManyMutationInput {
  name: String
}

input GroupParticipantUpdateManyWithoutGroupIdInput {
  create: [GroupParticipantCreateWithoutGroupIdInput!]
  delete: [GroupParticipantWhereUniqueInput!]
  connect: [GroupParticipantWhereUniqueInput!]
  set: [GroupParticipantWhereUniqueInput!]
  disconnect: [GroupParticipantWhereUniqueInput!]
  update: [GroupParticipantUpdateWithWhereUniqueWithoutGroupIdInput!]
  upsert: [GroupParticipantUpsertWithWhereUniqueWithoutGroupIdInput!]
  deleteMany: [GroupParticipantScalarWhereInput!]
  updateMany: [GroupParticipantUpdateManyWithWhereNestedInput!]
}

input GroupParticipantUpdateManyWithoutUserIdInput {
  create: [GroupParticipantCreateWithoutUserIdInput!]
  delete: [GroupParticipantWhereUniqueInput!]
  connect: [GroupParticipantWhereUniqueInput!]
  set: [GroupParticipantWhereUniqueInput!]
  disconnect: [GroupParticipantWhereUniqueInput!]
  update: [GroupParticipantUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [GroupParticipantUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [GroupParticipantScalarWhereInput!]
  updateMany: [GroupParticipantUpdateManyWithWhereNestedInput!]
}

input GroupParticipantUpdateManyWithWhereNestedInput {
  where: GroupParticipantScalarWhereInput!
  data: GroupParticipantUpdateManyDataInput!
}

input GroupParticipantUpdateWithoutGroupIdDataInput {
  userId: UserUpdateOneWithoutGroupsInput
  name: String
}

input GroupParticipantUpdateWithoutUserIdDataInput {
  groupId: GroupUpdateOneWithoutGroupParticipantsInput
  name: String
}

input GroupParticipantUpdateWithWhereUniqueWithoutGroupIdInput {
  where: GroupParticipantWhereUniqueInput!
  data: GroupParticipantUpdateWithoutGroupIdDataInput!
}

input GroupParticipantUpdateWithWhereUniqueWithoutUserIdInput {
  where: GroupParticipantWhereUniqueInput!
  data: GroupParticipantUpdateWithoutUserIdDataInput!
}

input GroupParticipantUpsertWithWhereUniqueWithoutGroupIdInput {
  where: GroupParticipantWhereUniqueInput!
  update: GroupParticipantUpdateWithoutGroupIdDataInput!
  create: GroupParticipantCreateWithoutGroupIdInput!
}

input GroupParticipantUpsertWithWhereUniqueWithoutUserIdInput {
  where: GroupParticipantWhereUniqueInput!
  update: GroupParticipantUpdateWithoutUserIdDataInput!
  create: GroupParticipantCreateWithoutUserIdInput!
}

input GroupParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  groupId: GroupWhereInput
  userId: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [GroupParticipantWhereInput!]
  OR: [GroupParticipantWhereInput!]
  NOT: [GroupParticipantWhereInput!]
}

input GroupParticipantWhereUniqueInput {
  id: ID
}

type GroupPreviousValues {
  id: ID!
  name: String!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  groupParticipants: GroupParticipantUpdateManyWithoutGroupIdInput
}

input GroupUpdateManyMutationInput {
  name: String
}

input GroupUpdateOneWithoutGroupParticipantsInput {
  create: GroupCreateWithoutGroupParticipantsInput
  update: GroupUpdateWithoutGroupParticipantsDataInput
  upsert: GroupUpsertWithoutGroupParticipantsInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutGroupParticipantsDataInput {
  name: String
}

input GroupUpsertWithoutGroupParticipantsInput {
  update: GroupUpdateWithoutGroupParticipantsDataInput!
  create: GroupCreateWithoutGroupParticipantsInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  groupParticipants_every: GroupParticipantWhereInput
  groupParticipants_some: GroupParticipantWhereInput
  groupParticipants_none: GroupParticipantWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCategoryParticipant(data: CategoryParticipantCreateInput!): CategoryParticipant!
  updateCategoryParticipant(data: CategoryParticipantUpdateInput!, where: CategoryParticipantWhereUniqueInput!): CategoryParticipant
  updateManyCategoryParticipants(data: CategoryParticipantUpdateManyMutationInput!, where: CategoryParticipantWhereInput): BatchPayload!
  upsertCategoryParticipant(where: CategoryParticipantWhereUniqueInput!, create: CategoryParticipantCreateInput!, update: CategoryParticipantUpdateInput!): CategoryParticipant!
  deleteCategoryParticipant(where: CategoryParticipantWhereUniqueInput!): CategoryParticipant
  deleteManyCategoryParticipants(where: CategoryParticipantWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createGroupParticipant(data: GroupParticipantCreateInput!): GroupParticipant!
  updateGroupParticipant(data: GroupParticipantUpdateInput!, where: GroupParticipantWhereUniqueInput!): GroupParticipant
  updateManyGroupParticipants(data: GroupParticipantUpdateManyMutationInput!, where: GroupParticipantWhereInput): BatchPayload!
  upsertGroupParticipant(where: GroupParticipantWhereUniqueInput!, create: GroupParticipantCreateInput!, update: GroupParticipantUpdateInput!): GroupParticipant!
  deleteGroupParticipant(where: GroupParticipantWhereUniqueInput!): GroupParticipant
  deleteManyGroupParticipants(where: GroupParticipantWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createSession(data: SessionCreateInput!): Session!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  categoryParticipant(where: CategoryParticipantWhereUniqueInput!): CategoryParticipant
  categoryParticipants(where: CategoryParticipantWhereInput, orderBy: CategoryParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CategoryParticipant]!
  categoryParticipantsConnection(where: CategoryParticipantWhereInput, orderBy: CategoryParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryParticipantConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  groupParticipant(where: GroupParticipantWhereUniqueInput!): GroupParticipant
  groupParticipants(where: GroupParticipantWhereInput, orderBy: GroupParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupParticipant]!
  groupParticipantsConnection(where: GroupParticipantWhereInput, orderBy: GroupParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupParticipantConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Room {
  id: ID!
  name: String!
  startTime: String!
  endTime: String!
  minPerson: Int!
  location: String
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  name: String!
  startTime: String!
  endTime: String!
  minPerson: Int!
  location: String
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  minPerson_ASC
  minPerson_DESC
  location_ASC
  location_DESC
}

type RoomPreviousValues {
  id: ID!
  name: String!
  startTime: String!
  endTime: String!
  minPerson: Int!
  location: String
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateInput {
  name: String
  startTime: String
  endTime: String
  minPerson: Int
  location: String
}

input RoomUpdateManyMutationInput {
  name: String
  startTime: String
  endTime: String
  minPerson: Int
  location: String
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTime: String
  startTime_not: String
  startTime_in: [String!]
  startTime_not_in: [String!]
  startTime_lt: String
  startTime_lte: String
  startTime_gt: String
  startTime_gte: String
  startTime_contains: String
  startTime_not_contains: String
  startTime_starts_with: String
  startTime_not_starts_with: String
  startTime_ends_with: String
  startTime_not_ends_with: String
  endTime: String
  endTime_not: String
  endTime_in: [String!]
  endTime_not_in: [String!]
  endTime_lt: String
  endTime_lte: String
  endTime_gt: String
  endTime_gte: String
  endTime_contains: String
  endTime_not_contains: String
  endTime_starts_with: String
  endTime_not_starts_with: String
  endTime_ends_with: String
  endTime_not_ends_with: String
  minPerson: Int
  minPerson_not: Int
  minPerson_in: [Int!]
  minPerson_not_in: [Int!]
  minPerson_lt: Int
  minPerson_lte: Int
  minPerson_gt: Int
  minPerson_gte: Int
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
}

type Session {
  id: ID!
  email: String!
  token: String!
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  email: String!
  token: String!
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
}

type SessionPreviousValues {
  id: ID!
  email: String!
  token: String!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  NOT: [SessionSubscriptionWhereInput!]
}

input SessionUpdateInput {
  email: String
  token: String
}

input SessionUpdateManyMutationInput {
  email: String
  token: String
}

input SessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
}

input SessionWhereUniqueInput {
  id: ID
  email: String
  token: String
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  categoryParticipant(where: CategoryParticipantSubscriptionWhereInput): CategoryParticipantSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  groupParticipant(where: GroupParticipantSubscriptionWhereInput): GroupParticipantSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  groups(where: GroupParticipantWhereInput, orderBy: GroupParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupParticipant!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  password: String!
  groups: GroupParticipantCreateManyWithoutUserIdInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGroupsInput {
  id: ID
  email: String!
  name: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  name: String
  password: String
  groups: GroupParticipantUpdateManyWithoutUserIdInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  groups: GroupParticipantUpdateManyWithoutUserIdInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput
  update: UserUpdateWithoutGroupsDataInput
  upsert: UserUpsertWithoutGroupsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGroupsDataInput {
  email: String
  name: String
  password: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutGroupsInput {
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  groups_every: GroupParticipantWhereInput
  groups_some: GroupParticipantWhereInput
  groups_none: GroupParticipantWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    